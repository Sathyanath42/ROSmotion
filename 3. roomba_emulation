Here we emulate the motion of a roomba machine in cleaning a room with turtlesim
We will deifne the following functions:
1. void move (double speed, double distance, bool is_forward)
2. void rotate (double angular_speed, double angle,bool clockwise)
   double degrees2radians(double angle_in_degrees)
3. void moveGoal(tutrlesim::Pose goal_pose,double distance_tolerance): gives the end position and the amount of error that can be tolerated

Function 1:
Moving in a straight line : feed in speed, distance and direction of motion

#!/usr/bin/env python
import rospy
from geometry_msgs.msg import Twist 
from std_msgs.msg import String
import time
import math


def move(speed,distance, dir):    
    velocity_message = Twist()
    rospy.loginfo("speed is %i", speed)
    rospy.loginfo("distance is %i", distance)
    rospy.loginfo("direction is %i", distance)
    #setting linear velocities
    if dir:
       velocity_message.linear.x = abs(speed)
    else: 
       velocity_message.linear.x = -abs(speed)
    velocity_message.linear.y = 0
    velocity_message.linear.z = 0

    #setting angular velocities
    velocity_message.angular.x = 0
    velocity_message.angular.y = 0
    velocity_message.angular.z = 0
    distance_moved = 0.0
    loop_rate = rospy.Rate(10)
    now = rospy.get_rostime()
    t0 = now.secs
    rospy.loginfo("Now time %i", t0)
    cmd_vel_topic='/turtle1/cmd_vel'
    velocity_publisher = rospy.Publisher(cmd_vel_topic, Twist, queue_size=10)

    while True:
        rospy.loginfo("Turtlesim moves forwards")     
        velocity_publisher.publish(velocity_message)    
        loop_rate.sleep()
        later = rospy.get_rostime()
        t1 = later.secs
        rospy.loginfo("Later time %i",t1)
        distance_moved = abs(speed) * abs(t1-t0)
        if not (distance_moved < distance):
            rospy.loginfo("reached")
            break       
    
    velocity_message.linear.x =0
    velocity_publisher.publish(velocity_message)
            
    #mesaure the current time
    #publish the velocity
    #estimated sitance = v * t
    #exit condition (estimated is equal/greater than stop ditsnace)

if __name__ == '__main__':
    try:
        rospy.init_node('mover', anonymous=True) 
        velocity_topic = "/turtle1/cmd_vel"
        velocity_publisher = rospy.Publisher(velocity_topic, Twist, move, queue_size = 10)
        print 'move:'
        move(0.1,10,1)
        time.sleep(2)
        print 'start reset:'
        rospy.wait_for_service('reset')
        reset_turtle = rospy.ServiceProxy('reset', Empty)
        reset_turtle()
        print 'end reset: '
        rospy.spin()          
    except rospy.ROSInterruptException:
        rospy.loginfo("node has been terminated.")
