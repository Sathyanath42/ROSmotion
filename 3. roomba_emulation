Here we emulate the motion of a roomba machine in cleaning a room with turtlesim
We will deifne the following functions:
1. void move (double speed, double distance, bool is_forward)
2. void rotate (double angular_speed, double angle, bool clockwise)
   double degrees2radians(double angle_in_degrees)
3. void moveGoal(tutrlesim::Pose goal_pose, double distance_tolerance): gives the end position and the amount of error that can be tolerated

Function 1:
Moving in a straight line

#!/usr/bin/env python
# license removed for brevity
import rospy
from geometry_msgs import Twist 
from std_msgs.msg import String
 
 def move(int speed,int distance, bool dir):    
    velocity_message = Twist()
    #setting linear velocities
    if dir
       velocity_message.linear.x = abs(speed)
    else 
       velocity_message.linear.x = -abs(speed)
    velocity_message.linear.y = 0
    velocity_message.linear.z = 0

    #setting angular velocities
    velocity_message.angular.x = 0
    velocity_message.angular.y = 0
    velocity_message.angular.z = 0
    distance_moved = 0.0
    loop_rate = rospy.Rate(10)

    while True:
        rospy.loginfo("Turtlesim moves forwards")     
        velocity_publisher.publish(velocity_message)    
        distance_moved = velocity_message.linear.x * abs(time)
         if not (distance_moved<distance):
            rospy.loginfo("reached")
            break               
    #mesaure the current time
    #publish the velocity
    #estimated sitance = v * t
    #exit condition (estimated is equal/greater than stop ditsnace)

 if __name__ == '__main__':
     try:
        rospy.init_node('mover', anonymous=True) 
        velocity_topic = "/turtle1/cmd_vel"
        velocity_pub = rospy.Publisher(velocity_topic, Twist, move)
        move(3,10,1)
     except rospy.ROSInterruptException:
         pass
