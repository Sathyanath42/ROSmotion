Here we emulate the motion of a roomba machine in cleaning a room with,turtlesim
We will deifne the following functions:
1. void move (double speed, double distance, bool is_forward)
2. void rotate (double angular_speed, double angle,bool clockwise)
   double degrees2radians(double angle_in_degrees)
3. void moveGoal(tutrlesim::Pose goal_pose,double distance_tolerance): gives the end position and the amount of error that can be tolerated

Function 1:
Moving in a straight line : feed in speed, distance and direction of motion

****************************************USING THE FORMULA
#!/usr/bin/env python
import rospy
from geometry_msgs.msg import Twist
from turtlesim.msg import Pose
import math
import time
from std_srvs.srv import Empty

x=0
y=0
z=0
yaw=0
velocity_publisher = None
pose_subscriber = None

def poseCallback(pose_message):
    global x
    global y, z, yaw
    
    #obtaining the positions
    x= pose_message.x
    y= pose_message.y
    yaw = pose_message.theta

def move(speed, distance, direction):
    #declare a Twist message to send velocity commands
    velocity_message = Twist()

    #get current location 
    x0=x
    y0=y
    #z0=z;
    #yaw0=yaw;
    if direction:
        velocity_message.linear.x = speed
    else:
        velocity_message.linear.x = -speed
    distance_moved = 0.0
    loop_rate = rospy.Rate(100) # we publish the velocity at 100 Hz (100 times a second)    
            
    while True :
        if direction:
            rospy.loginfo("Turtlesim moves forwards")
        else:
            rospy.loginfo("Turtlesim moves back")
        velocity_publisher.publish(velocity_message)
        loop_rate.sleep()
                    
        #rospy.Duration(1.0)
        #distance formula
        distance_moved = distance_moved+abs(0.5 * math.sqrt(((x-x0) ** 2) + ((y-y0) ** 2)))
        print  distance_moved      

        #check if the distance has reached         
        if  not (distance_moved<distance):
            rospy.loginfo("reached")
            break
            
    #finally, stop the robot when the goal has been reached
    velocity_message.linear.x =0
    velocity_publisher.publish(velocity_message)
    
if __name__ == '__main__':
    try:
        #initialise node
        rospy.init_node('turtlesim_motion_pose', anonymous=True)

        #declare velocity publisher
        cmd_vel_topic='/turtle1/cmd_vel'
        velocity_publisher = rospy.Publisher(cmd_vel_topic, Twist, queue_size=10)
        
        #declare position subscriber
        position_topic = "/turtle1/pose"
        pose_subscriber = rospy.Subscriber(position_topic, Pose, poseCallback) 
        time.sleep(2)
        
        #for feeding in the values
        print 'move: '
        s = input("Input the velocity")
        l = input("Input the distance")
        d = input("Input the direction: 1 for forward, 0 for reverse)")
        move (s,l,d)
        time.sleep(2)

        #for resetting the turtle
        print 'start reset: '
        rospy.wait_for_service('reset')
        reset_turtle = rospy.ServiceProxy('reset', Empty)
        reset_turtle()
        print 'end reset: '

        rospy.spin()
       
    except rospy.ROSInterruptException:
        rospy.loginfo("node terminated.")
**********************************************************
*********************************************************Using the clock

To use the clock functionality we have to add to the parameter file as a launch file as follows:
/catkin_ws/src/my_robot_bringup/launch$ vim sim_time.launch

*****************************************CODE
<launch>

   <param name="/use_sim_time" value="True" />

</launch>

******************************************
We then roslaunch my_robot_bringup sim_time.launch  


NOTE: Using the simulated clock isnt working just yet, run ordinary roscore
*************************************************************

#!/usr/bin/env python
import rospy
from geometry_msgs.msg import Twist
from turtlesim.msg import Pose
import math
import time
from std_srvs.srv import Empty


velocity_publisher = None

def move(speed, distance, direction):
    #declare a Twist message to send velocity commands
    velocity_message = Twist()

    now = rospy.get_rostime()
    t0 = now.secs
    rospy.loginfo("Now time %i", t0)

    if direction:
        velocity_message.linear.x = speed
    else:
        velocity_message.linear.x = -speed
    distance_moved = 0.0


    loop_rate = rospy.Rate(10) # we publish the velocity at 100 Hz (100 times a second)    
            
    while True :
        if direction:
            rospy.loginfo("Turtlesim moves forwards")
        else:
            rospy.loginfo("Turtlesim moves back")
        velocity_publisher.publish(velocity_message)
        loop_rate.sleep()

        later = rospy.get_rostime()
        t1 = later.secs
        rospy.loginfo("later time %i", t1)

        #rospy.loginfo("checker")
        distance_moved = distance_moved + (abs(speed) * abs(t1-t0))
        rospy.loginfo("distance moved is %i", distance_moved)
        if not (distance_moved < distance): 
            rospy.loginfo("reached")
            break     
            
    #finally, stop the robot when the goal has been reached
    velocity_message.linear.x =0
    velocity_publisher.publish(velocity_message)
    
if __name__ == '__main__':
    try:
        #initialise node
        rospy.init_node('turtlesim_motion_pose', anonymous=True)

        #declare velocity publisher
        cmd_vel_topic='/turtle1/cmd_vel'
        velocity_publisher = rospy.Publisher(cmd_vel_topic, Twist, queue_size=10)        
        time.sleep(2)
        
        #for feeding in the values
        print 'move: '
        s = input("Input the velocity")
        l = input("Input the distance")
        d = input("Input the direction: 1 for forward, 0 for reverse)")
        move (s,l,d)
        time.sleep(2)

        #for resetting the turtle
        print 'start reset: '
        rospy.wait_for_service('reset')
        reset_turtle = rospy.ServiceProxy('reset', Empty)
        reset_turtle()
        print 'end reset: '

        rospy.spin()
       
    except rospy.ROSInterruptException:
        rospy.loginfo("node terminated.")
