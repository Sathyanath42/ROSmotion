Function 2: Rotate, to have the turtle rotate to the orientation we desire


#!/usr/bin/env python
import rospy
from geometry_msgs.msg import Twist
from turtlesim.msg import Pose
import math
import time
from std_srvs.srv import Empty

x=0
y=0
z=0
yaw=0

def poseCallback(pose_message):
    global x
    global y, z, yaw
    
    #obtaining the positions
    x= pose_message.x
    y= pose_message.y
    yaw = pose_message.theta

def rotate(angular_speed_degree, relative_angle_degree, clockwise):
    global yaw
    vel_msg = Twist()
    vel_msg.linear.x = 0
    vel_msg.linear.y = 0
    vel_msg.linear.z = 0
    vel_msg.angular.x = 0
    vel_msg.angular.y = 0
    vel_msg.angular.z = 0
    
    theta0 = yaw
    angular_speed = math.radians(abs(angular_speed_degree))
    
    
    if clockwise:
        vel_msg.angular.z = -abs(angular_speed)
    else:
        vel_msg.angular.z = abs(angular_speed)

    angle_moved = 0.0
    loop_rate = rospy.Rate(10) # we publish the velocity at 100 Hz (100 times a second)    
    
    t0 = rospy.Time.now().to_sec() 

    while True :
        if clockwise:
            rospy.loginfo("Turtle rotates clockwise")
        else:
            rospy.loginfo("Turtle rotates anticlockwise")

        cmd_vel_topic='/turtle1/cmd_vel'
        velocity_publisher = rospy.Publisher(cmd_vel_topic, Twist, queue_size=10)        
        velocity_publisher.publish(vel_msg)
        
        t1 = rospy.Time.now().to_sec()
        current_angle_degree = (t1-t0)*angular_speed_degree
        loop_rate.sleep()
                       

        #check if the distance has reached         
        if  current_angle_degree>relative_angle_degree:
            rospy.loginfo("reached")
            break


    vel_msg.angular.z = 0
    velocity_publisher.publish(vel_msg)


def move(speed, distance, direction):
    #declare a Twist message to send velocity commands
    velocity_message = Twist()

    #get current location 
    x0=x
    y0=y
    #z0=z;
    #yaw0=yaw;
    if direction:
        velocity_message.linear.x = speed
    else:
        velocity_message.linear.x = -speed
    distance_moved = 0.0
    loop_rate = rospy.Rate(100) # we publish the velocity at 100 Hz (100 times a second)    
            
    while True :
        if direction:
            rospy.loginfo("Turtlesim moves forwards")
        else:
            rospy.loginfo("Turtlesim moves back")

        cmd_vel_topic='/turtle1/cmd_vel'
        velocity_publisher = rospy.Publisher(cmd_vel_topic, Twist, queue_size=10)
        velocity_publisher.publish(velocity_message)
        loop_rate.sleep()
                    
        #rospy.Duration(1.0)
        #distance formula
        distance_moved = distance_moved+abs(0.5 * math.sqrt(((x-x0) ** 2) + ((y-y0) ** 2)))
        print  distance_moved      

        #check if the distance has reached         
        if  not (distance_moved<distance):
            rospy.loginfo("reached")
            break
            
    #finally, stop the robot when the goal has been reached
    velocity_message.linear.x =0
    velocity_publisher.publish(velocity_message)
    
if __name__ == '__main__':
    try:
        #initialise node
        rospy.init_node('turtlesim_motion_pose', anonymous=True)

        #declare velocity publisher
        cmd_vel_topic='/turtle1/cmd_vel'
        velocity_publisher = rospy.Publisher(cmd_vel_topic, Twist, queue_size=10)
        
        #declare position subscriber
        position_topic = "/turtle1/pose"
        pose_subscriber = rospy.Subscriber(position_topic, Pose, poseCallback) 
        time.sleep(2)
        
        #for feeding in the values
        print 'move: '
        #s = input("Input the velocity")
        #l = input("Input the distance")
        #d = input("Input the direction: 1 for forward, 0 for reverse)")
        #move (s,l,d)
        rotate(10,45,1)
        time.sleep(2)

        #for resetting the turtle
        print 'start reset: '
        rospy.wait_for_service('reset')
        reset_turtle = rospy.ServiceProxy('reset', Empty)
        reset_turtle()
        print 'end reset: '

        rospy.spin()
       
    except rospy.ROSInterruptException:
        rospy.loginfo("node terminated.")
